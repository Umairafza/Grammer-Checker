{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\umair\\\\Music\\\\grammar-app\\\\frontend\\\\src\\\\components\\\\GrammarChecker.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GrammarChecker() {\n  _s();\n  const [text, setText] = useState('');\n  const [corrections, setCorrections] = useState([]);\n  const [correctedSentence, setCorrectedSentence] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const handleCheckGrammar = async () => {\n    if (!text.trim()) return;\n    setIsLoading(true);\n    try {\n      const response = await axios.post('https://api.openai.com/v1/chat/completions', {\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'system',\n          content: 'You are a helpful grammar correction assistant.'\n        }, {\n          role: 'user',\n          content: `For the following text, first provide the fully corrected sentence on the first line. Then, on the next lines, list each incorrect word and its correction in the format \"incorrect -> correct\". If there are no mistakes, reply with \"No corrections needed\". Text: \"${text}\"`\n        }],\n        max_tokens: 500\n      }, {\n        headers: {\n          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      const corrections = response.data.choices[0].message.content.trim();\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return {\n          original: original === null || original === void 0 ? void 0 : original.trim(),\n          corrected: corrected === null || corrected === void 0 ? void 0 : corrected.trim()\n        };\n      }).filter(c => c.original && c.corrected));\n\n      // Create corrected sentence by replacing incorrect words\n      let corrected = text;\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return {\n          original: original === null || original === void 0 ? void 0 : original.trim(),\n          corrected: corrected === null || corrected === void 0 ? void 0 : corrected.trim()\n        };\n      }).filter(c => c.original && c.corrected));\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return {\n          original: original === null || original === void 0 ? void 0 : original.trim(),\n          corrected: corrected === null || corrected === void 0 ? void 0 : corrected.trim()\n        };\n      }).filter(c => c.original && c.corrected));\n      setCorrectedSentence(corrected);\n    } catch (err) {\n      console.error(err);\n      setCorrectedSentence('Error checking grammar. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Highlight incorrect words for preview\n  const highlightIncorrectWords = () => {\n    let highlighted = text;\n    corrections.forEach(({\n      original\n    }) => {\n      if (original) {\n        const regex = new RegExp(`\\\\b${original}\\\\b`, 'gi');\n        highlighted = highlighted.replace(regex, `<span style=\"color: red; font-weight: bold;\">${original}</span>`);\n      }\n    });\n    return highlighted;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen flex flex-col items-center p-4 bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-bold mb-6\",\n      children: \"Grammar Checker\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-2xl mb-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-gray-700 mb-2\",\n        children: \"Enter your text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: text,\n        onChange: e => setText(e.target.value),\n        className: \"w-full h-40 p-4 border rounded mb-2\",\n        placeholder: \"Enter your text here...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), corrections.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full p-4 border rounded bg-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-gray-700 mb-2 text-sm\",\n          children: \"Preview (incorrect words in red):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full min-h-[2rem]\",\n          dangerouslySetInnerHTML: {\n            __html: highlightIncorrectWords()\n          },\n          style: {\n            whiteSpace: 'pre-wrap'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCheckGrammar,\n      disabled: isLoading,\n      className: \"bg-blue-500 text-white p-3 rounded hover:bg-blue-600 mb-4 disabled:bg-gray-400\",\n      children: isLoading ? 'Checking...' : 'Check Grammar'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-2xl\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"block text-gray-700 mb-2\",\n        children: \"Corrected Text:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full p-4 border rounded bg-white min-h-[3rem]\",\n        children: correctedSentence ? /*#__PURE__*/_jsxDEV(\"span\", {\n          children: correctedSentence\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-gray-500\",\n          children: \"Corrected text will appear here...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(GrammarChecker, \"NJLhjFTPf86VNRwXXe0e93QuIZ8=\");\n_c = GrammarChecker;\nexport default GrammarChecker;\nvar _c;\n$RefreshReg$(_c, \"GrammarChecker\");","map":{"version":3,"names":["useState","axios","jsxDEV","_jsxDEV","GrammarChecker","_s","text","setText","corrections","setCorrections","correctedSentence","setCorrectedSentence","isLoading","setIsLoading","handleCheckGrammar","trim","response","post","model","messages","role","content","max_tokens","headers","Authorization","process","env","OPENAI_API_KEY","data","choices","message","split","filter","line","map","original","corrected","c","err","console","error","highlightIncorrectWords","highlighted","forEach","regex","RegExp","replace","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","length","dangerouslySetInnerHTML","__html","style","whiteSpace","onClick","disabled","_c","$RefreshReg$"],"sources":["C:/Users/umair/Music/grammar-app/frontend/src/components/GrammarChecker.js"],"sourcesContent":["import { useState } from 'react';\nimport axios from 'axios';\n\nfunction GrammarChecker() {\n  const [text, setText] = useState('');\n  const [corrections, setCorrections] = useState([]);\n  const [correctedSentence, setCorrectedSentence] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleCheckGrammar = async () => {\n    if (!text.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const response = await axios.post(\n        'https://api.openai.com/v1/chat/completions',\n        {\n          model: 'gpt-3.5-turbo',\n          messages: [\n            { role: 'system', content: 'You are a helpful grammar correction assistant.' },\n            { role: 'user', content: `For the following text, first provide the fully corrected sentence on the first line. Then, on the next lines, list each incorrect word and its correction in the format \"incorrect -> correct\". If there are no mistakes, reply with \"No corrections needed\". Text: \"${text}\"` }\n          ],\n          max_tokens: 500,\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n        }\n      );\n      const corrections = response.data.choices[0].message.content.trim();\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return { original: original?.trim(), corrected: corrected?.trim() };\n      }).filter(c => c.original && c.corrected));\n      \n      // Create corrected sentence by replacing incorrect words\n      let corrected = text;\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return { original: original?.trim(), corrected: corrected?.trim() };\n      }).filter(c => c.original && c.corrected));\n      setCorrections(corrections.split('\\n').filter(line => line.trim()).map(line => {\n        const [original, corrected] = line.split(' -> ');\n        return { original: original?.trim(), corrected: corrected?.trim() };\n      }).filter(c => c.original && c.corrected));\n      setCorrectedSentence(corrected);\n      \n    } catch (err) {\n      console.error(err);\n      setCorrectedSentence('Error checking grammar. Please try again.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Highlight incorrect words for preview\n  const highlightIncorrectWords = () => {\n    let highlighted = text;\n    corrections.forEach(({ original }) => {\n      if (original) {\n        const regex = new RegExp(`\\\\b${original}\\\\b`, 'gi');\n        highlighted = highlighted.replace(\n          regex,\n          `<span style=\"color: red; font-weight: bold;\">${original}</span>`\n        );\n      }\n    });\n    return highlighted;\n  };\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center p-4 bg-gray-100\">\n      <h2 className=\"text-2xl font-bold mb-6\">Grammar Checker</h2>\n      \n      {/* Editable textarea */}\n      <div className=\"w-full max-w-2xl mb-4\">\n        <label className=\"block text-gray-700 mb-2\">Enter your text:</label>\n        <textarea\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          className=\"w-full h-40 p-4 border rounded mb-2\"\n          placeholder=\"Enter your text here...\"\n        />\n        \n        {/* Preview with highlighted incorrect words */}\n        {corrections.length > 0 && (\n          <div className=\"w-full p-4 border rounded bg-white\">\n            <label className=\"block text-gray-700 mb-2 text-sm\">Preview (incorrect words in red):</label>\n            <div\n              className=\"w-full min-h-[2rem]\"\n              dangerouslySetInnerHTML={{ __html: highlightIncorrectWords() }}\n              style={{ whiteSpace: 'pre-wrap' }}\n            />\n          </div>\n        )}\n      </div>\n      \n      {/* Check Grammar Button */}\n      <button\n        onClick={handleCheckGrammar}\n        disabled={isLoading}\n        className=\"bg-blue-500 text-white p-3 rounded hover:bg-blue-600 mb-4 disabled:bg-gray-400\"\n      >\n        {isLoading ? 'Checking...' : 'Check Grammar'}\n      </button>\n      \n      {/* Output box with corrected sentence */}\n      <div className=\"w-full max-w-2xl\">\n        <label className=\"block text-gray-700 mb-2\">Corrected Text:</label>\n        <div className=\"w-full p-4 border rounded bg-white min-h-[3rem]\">\n          {correctedSentence ? (\n            <span>{correctedSentence}</span>\n          ) : (\n            <span className=\"text-gray-500\">Corrected text will appear here...</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GrammarChecker;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}